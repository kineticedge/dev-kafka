#compdef kafka-acls

function _append_equal() {
  compadd -S '=' -- "$@"
}

function _operation() {
  local configs=(  
    "Describe"
    "DescribeConfigs"
    "Alter"
    "IdempotentWrite"
    "Read"
    "Delete"
    "Create"
    "ClusterAction"
    "All"
    "Write"
    "AlterConfigs"
    "CreateTokens"
    "DescribeTokens"
  )
  compadd "${configs[@]}"
}

function _resource_pattern_type() {
  local configs=(
    "ANY"
    "MATCH"
    "LITERAL"
    "PREFIXED"
  )
  compadd "${configs[@]}"
}


function _groups() {

  local BROKER=$(_extract_arg "--bootstrap-server")
  local CONFIG_FILE=$(_extract_arg "--command-config")

  local -a groups
  if [[ ! -x kafka-cli ]]; then
    groups=($(kafka-cli groups --bootstrap-server "$BROKER" --command-config "$CONFIG_FILE"))
  else
    groups=($(kafka-consumer-groups --bootstrap-server "$BROKER" --command-config "$CONFIG_FILE" --list 2>/dev/null))
  fi

  compadd ${groups[@]}
}

function _topics() {

  local BROKER=$(_extract_arg "--bootstrap-server")
  local CONFIG_FILE=$(_extract_arg "--command-config")

  local -a topics
  if [[ ! -x kafka-cli ]]; then
    topics=($(kafka-cli topics --bootstrap-server "$BROKER" --command-config "$CONFIG_FILE"))
  else
    topics=($(kafka-topics --bootstrap-server "$BROKER" --command-config "$CONFIG_FILE" --list 2>/dev/null))
  fi

  compadd ${topics[@]}
}

function _principals() {

  local BROKER=$(_extract_arg "--bootstrap-server")
  local CONFIG_FILE=$(_extract_arg "--command-config")

  local -a principals
  if [[ ! -x kafka-cli ]]; then
    principals=($(kafka-cli principals --bootstrap-server "$BROKER" --command-config "$CONFIG_FILE"))
  else
    principals=()
  fi

  compadd ${principals[@]}
}


# function
function _script() {
  local context state line arguments
  typeset -A opt_args

 arguments=(
    '--bootstrap-server[ the Kafka server to connect to.]:server:->bootstrap-server'
    '--command-config[ property file containing configs to be passed to Admin Client.]:file:_files'
    '(--add --list --remove --version)'--add'[ indicates you are trying to add ACLs..]'
    '(--add --list --remove --version)'--list'[ list ACLs for the specified resource, use --topic <topic> or --group <group> or --cluster to specify a resource.]'
    '(--add --list --remove --version)'--remove'[ Indicates you are trying to remove ACLs.]'
    '(--add --list --remove --version)'--version'[ .]'
    '*--operation[  Operation that is being allowed or denied.]:operation:_operation'
    '--resource-pattern-type[ The type of the resource pattern or pattern filter.]:resource_pattern_type:_resource_pattern_type'
    '--user-principal[ Specifies a user principal as a resource in relation with the operation. For instance one could grant CreateTokens or DescribeTokens permission on a given user principal.]:principal:_principals'

    '--allow-host[ host from which principals listed in -- allow-principal will have access. If you have specified --allow-principal then the default for this option will be set to `*` which allows access from all hosts.]'
    '--allow-principal[ principal is in principalType:name format. Note that principalType must be supported by the Authorizer being used. For example, User:`*` is the wild card indicating all users.]:principal:_principals'
    '--deny-host[ host from which principals listed in -- deny-principal will be denied access. If you have specified --deny- principal then the default for this option will be set to `*` which denies access from all hosts.]'
    '--deny-principal[ principal is in principalType:name format. By default anyone not added through --allow-principal is denied access. You only need to use this option as negation to already allowed set. Note that principalType must be supported by the Authorizer being used. For example if you wanted to allow access to all users in the system but not test-user you can define an ACL that allows access to User:`*` and specify --deny- principal=User:test@EXAMPLE.COM. AND PLEASE REMEMBER DENY RULES TAKES PRECEDENCE OVER ALLOW RULES.]:principal:_principals'
    '--transactional-id[ the transactionalId to which ACLs should be added or removed. A value of `*` indicates the ACLs should apply to all transactionalIds.]'

  )

  if (( words[(Ie)--add] )); then
    arguments+=(
      '--cluster[ add/remove cluster ACLs.]'
      '*--topic[ topic to which ACLs should be added or removed. A value of `*` indicates ACL should apply to all topics.]:topic:_topics'
      '*--group[ consumer group to which the ACLs should be added or removed. A value of `*` indicates the ACLs should apply to all groups.]:group:_groups'
      '*--transaction-id[ .]'
      '--producer[ convenience option to add/remove ACLs for producer role. This will generate ACLs that allows WRITE, DESCRIBE and CREATE on topic.]'
      '--consumer[ convenience option to add/remove ACLs for consumer role. This will generate ACLs that allows READ, DESCRIBE on topic and READ on group.]'
      '--force[ assume yes to all queries and do not prompt.]'
      '--delegation-token[ delegation token to which ACLs should be added or removed. A value of `*` indicates ACL should apply to all tokens.]'
    )
  fi
  if (( words[(Ie)--list] )); then
    arguments+=(
      '*--topic[ topic to which ACLs should be added or removed. A value of `*` indicates ACL should apply to all topics.]:topic:_topics'
      '*--group[ consumer group to which the ACLs should be added or removed. A value of `*` indicates the ACLs should apply to all groups.]:group:_groups'
      '*--principal[ List ACLs for the specified principal. principal is in principalType:name format. Note that principalType must be supported by the Authorizer being used.]:principal:_principals'
    )
  fi
  if (( words[(Ie)--remove] )); then
    arguments+=(
      '*--topic[ topic to which ACLs should be added or removed. A value of `*` indicates ACL should apply to all topics.]:topic:_topics'
      '*--group[ consumer group to which the ACLs should be added or removed. A value of `*` indicates the ACLs should apply to all groups.]:group:_groups'
      '--producer[ Convenience option to add/remove ACLs for producer role. This will generate ACLs that allows WRITE, DESCRIBE and CREATE on topic.]'
      '--consumer[ convenience option to add/remove ACLs for consumer role. This will generate ACLs that allows READ, DESCRIBE on topic and READ on group.]'
      '--force[ assume Yes to all queries and do not prompt.'
      '--delegation-token[ delegation token to which ACLs should be added or removed. A value of `*` indicates ACL should apply to all tokens.]'
    )
  fi

  if (( words[(Ie)--producer] )); then
    arguments+=(
      '--idempotent[ Enable idempotence for the producer. This should be used in combination with the --producer option. Note that idempotence is enabled automatically if the producer is authorized to a particular transactional-id.]'
    )
  fi
  if (( words[(Ie)--consumer] )); then
    arguments+=(
    )
  fi

  _arguments -C "${arguments[@]}" && ret=0
  
  case $state in
    (bootstrap-server)
      compadd "localhost:9092"
      ;;
  esac

  return $ret
}

_script "$@"

